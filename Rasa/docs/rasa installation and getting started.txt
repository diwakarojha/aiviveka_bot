Starting Rasa on Ubuntu

1. Download Miniconda script:
	wget https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-x86_64.sh
2. install Mini conda:
	bash Miniconda3-latest-Linux-x86_64.sh
3. conda create new environemnt
	conda create -n rasa
	conda activate rasa
4. install rasa with spacy:
	pip3 install rasa[spacy]
	python3 -m spacy download en_core_web_md
5.  Run rasa :
	rasa run -m models --enable-api --cors “*”
	rasa run --cors "*" --debug
	rasa run actions –cors “*” --debug
	in Webchat:
	socketUrl: "http://localhost:5005/",
	In Jitesh:
	const rasa_server_url = "http://localhost:5005/webhooks/rest/webhook";
6. make you local host global:
	ngrok http --host-header=rewrite 5005
	ngrok http 5005;

Setup Git and use git:

1.  Install git:
	sudo apt-get install git
2.  Add user name and email id:
	git config --global user.name "diwakarojha"
  	git config --global user.email "dojha00@gmail.com"
3.  git clode directory
	git clone https://github.com/diwakarojha/diwakarojha.github.io.git
4. few other commands:
	git status; git add .; git commit -m “added bot”
5.  Create ssh key :
	ssh-keygen -t ed25519 -C "dojha00@gmail.com"
6. add ssh key:
	ssh-add ~/.ssh/id_ed25519
7. add public ssh key to github account/ setting/ ssh:
	cat ~/home/ojha/.ssh/id_ed25519.pub
8. add git directory as origin:
	git remote set-url origin git@github.com:diwakarojha/diwakarojha.github.io.git
9. push changes to online:
	git push.


    • If auto activate miniconda bash is enable use below command to disable:
	conda config --set auto_activate_base false
    • Resolve ruamel issue:
rm -rf $(python -c "from distutils.sysconfig import get_python_lib; print(get_python_lib())")/ruamel*
if facing issue with openpyssl:
	
Rasa Package installs:
CacheControl-0.12.11 aio-pika-8.3.0 aiogram-2.23.1 aiohttp-3.8.3 aiormq-6.6.4 aiosignal-1.3.1 apscheduler-3.9.1.post1 blis-0.7.9 boto3-1.26.50 botocore-1.29.50 coloredlogs-15.0.1 confection-0.0.4 cryptography-39.0.0 dask-2022.10.2 fbmessenger-6.0.0 fire-0.5.0 google-auth-2.16.0 google-auth-oauthlib-0.4.6 h5py-3.7.0 importlib-metadata-6.0.0 importlib-resources-5.10.2 jinja2-3.1.2 jsonschema-4.16.0 keras-preprocessing-1.1.2 markdown-3.4.1 matplotlib-3.5.3 mattermostwrapper-2.2 opt-einsum-3.3.0 packaging-20.9 partd-1.3.0 pathy-0.10.1 preshed-3.0.8 pydantic-1.10.4 pydot-1.4.2 pykwalify-1.8.0 python-socketio-5.7.2 pytz-deprecation-shim-0.1.0.post0 questionary-1.10.0 randomname-0.1.5 rasa-3.4.0 rasa-sdk-3.4.0 redis-4.4.2 requests-oauthlib-1.3.1 requests-toolbelt-0.10.1 rocketchat_API-1.28.1 ruamel.yaml-0.17.21 ruamel.yaml.clib-0.2.7 s3transfer-0.6.0 sanic-cors-2.0.1 scikit-learn-1.1.3 spacy-3.4.4 tensorboard-2.8.0 tensorflow-2.8.4 tensorflow-addons-0.17.1 tensorflow-text-2.8.2 thinc-8.1.7 twilio-7.14.2 tzlocal-4.2 webexteamssdk-1.6.1

Rasa Responses
Text
    • sending response from domain.yml
      responses:
      utter_greet:
          - text: "Hello 😀"
    • sending response from custom actions actions.py
         dispatcher.utter_message(text="Hello 😀")
Images
    • sending response from domain.yml
      responses:
        utter_cheer_up:
        - text: "Here is something to cheer you up 😉 "
          image: "https://i.imgur.com/nGF1K8f.jpg"
    • sending response from custom actions actions.py
         dispatcher.utter_message(text="Here is something to cheer you up 😉", image="https://i.imgur.com/nGF1K8f.jpg")
Buttons
    • sending response from domain.yml
      responses:
        utter_greet:
        - text: "Hey! How are you?"
          buttons:
          - title: "great"
            payload: "great"
          - title: "super sad"
            payload: "super sad"
    • sending response from custom actions actions.py
         button_resp=[
                        {
                            "title": "great",
                            "payload": "great"
                        },
                        {
                            "title": "super sad",
                            "payload": "super sad"
                        }
                    ]
      
         dispatcher.utter_message(text="Hey! How are you?", buttons=button_resp)
Videos
    • sending response from domain.yml
      responses:
        utter_greet:
        - text: "Check this video"
          attachment: { "type":"video", "payload":{ "src": "https://youtube.com/embed/9C1Km6xfdMA" } }
    • sending response from custom actions actions.py
      msg = { "type": "video", "payload": { "title": "Link name", "src": "https://youtube.com/embed/9C1Km6xfdMA" } }
      
      dispatcher.utter_message(text="Check this video",attachment=msg)

Dropdown
    • sending response from domain.yml
      responses:
        utter_menu:
        - text: "Please select a option"
          custom:
            payload: dropDown
            data:
            - label: option1
              value: "/inform{'slot_name':'option1'}"
            - label: option2
              value: "/inform{'slot_name':'option2'}"
            - label: option3
              value: "/inform{'slot_name':'option3'}"
    • sending response from custom actions actions.py
        data=[{"label":"option1","value":"/inform{'slot_name':'option1'}"},{"label":"option2","value":"/inform{'slot_name':'option2'}"},{"label":"option3","value":"/inform{'slot_name':'option3'}"}]
      
        message={"payload":"dropDown","data":data}
        
        dispatcher.utter_message(text="Please select a option",json_message=message)
      
Quick Replies
    • sending response from domain.yml
      responses:
        utter_cuisine:
        - text: "Please choose a cuisine"
          custom:
            payload: quickReplies
            data:
            - title: chip1
              payload: chip1_payload
            - title: chip2
              payload: chip2_payload
            - title: chip3
              payload: chip3_payload
    • sending response from custom actions actions.py
        data= [ { "title":"chip1", "payload":"chip1_payload" }, { "title":"chip2", "payload":"chip2_payload" }, { "title":"chip3", "payload":"chip3_payload" } ]
      
        message={"payload":"quickReplies","data":data}
      
        dispatcher.utter_message(text="Please choose a cuisine",json_message=message)
      
Collapsible
    • sending response from domain.yml
      responses:
        utter_askLeaveTypes:
        - text: "You can apply for below leaves"
          custom: 
              payload: "collapsible"
              data: 
              - title: Sick Leave
                description: Sick leave is time off from work that workers can use to stay home
                  to address their health and safety needs without losing pay.
              - title: Earned Leave
                description: 'Earned Leaves are the leaves which are earned in the previous year
                  and enjoyed in the preceding years. '
              - title: Casual Leave
                description: Casual Leave are granted for certain unforeseen situation or were you
                  are require to go for one or two days leaves to attend to personal matters and
                  not for vacation.
              - title: Flexi Leave
                description: Flexi leave is an optional leave which one can apply directly in system
                  at lease a week before.
    • sending response from custom actions actions.py
        data= [ { "title": "Sick Leave", "description": "Sick leave is time off from work that workers can use to stay home to address their health and safety needs without losing pay." }, { "title": "Earned Leave", "description": "Earned Leaves are the leaves which are earned in the previous year and enjoyed in the preceding years. " }, { "title": "Casual Leave", "description": "Casual Leave are granted for certain unforeseen situation or were you are require to go for one or two days leaves to attend to personal matters and not for vacation." }, { "title": "Flexi Leave", "description": "Flexi leave is an optional leave which one can apply directly in system at lease a week before." } ]
      
        message={ "payload": "collapsible", "data": data }
      
        dispatcher.utter_message(text="You can apply for below leaves",json_message=message)
      
Charts
    • sending response from domain.yml
      responses:
        utter_askLeaveBalance:
        - text: "Here are your leave balance details"
          custom:
            payload: chart
            data:
              title: Leaves
              labels:
              - Sick Leave
              - Casual Leave
              - Earned Leave
              - Flexi Leave
              backgroundColor:
              - "#36a2eb"
              - "#ffcd56"
              - "#ff6384"
              - "#009688"
              - "#c45850"
              chartsData:
              - 5
              - 10
              - 22
              - 3
              chartType: pie
              displayLegend: 'true'
    • sending response from custom actions actions.py
        data={ "title": "Leaves", "labels": [ "Sick Leave", "Casual Leave", "Earned Leave", "Flexi Leave" ], "backgroundColor": [ "#36a2eb", "#ffcd56", "#ff6384", "#009688", "#c45850" ], "chartsData": [ 5, 10, 22, 3 ], "chartType": "pie", "displayLegend": "true" }
      
        message={ "payload": "chart", "data": data }
      
        dispatcher.utter_message(text="Here are your leave balance details",json_message=message)
      
Location access
    • sending response from domain.yml
      responses:
        utter_ask_location::
          - text: "Sure, please allow me to access your location 🧐"
            custom: 
              payload: location
    • sending response from custom actions actions.py
      message={"payload":"location"}
      
      dispatcher.utter_message("Sure, please allow me to access your location 🧐",json_message=message)
Card Carousel
    • sending response from domain.yml 
      responses:
        utter_cards_carousel:
          custom:
            payload: cardsCarousel
            data:
            - image: https://b.zmtcdn.com/data/pictures/1/17428541/da50010b1a953dfbb109306fba5a6c06.jpg
              name: abc
              ratings: '4.0'
              title: pqr
            - image: https://b.zmtcdn.com/data/pictures/1/17428541/da50010b1a953dfbb109306fba5a6c06.jpg
              name: abc
              ratings: '4.0'
              title: pqr
            - image: https://b.zmtcdn.com/data/pictures/1/17428541/da50010b1a953dfbb109306fba5a6c06.jpg
              name: abc
              ratings: '4.0'
              title: pqr
            - image: https://b.zmtcdn.com/data/pictures/1/17428541/da50010b1a953dfbb109306fba5a6c06.jpg
              name: abc
              ratings: '4.0'
              title: pqr
    • sending response from custom actions actions.py 
      
        data = {
              "payload": 'cardsCarousel',
              "data": [
                  {
                      "image": "https://b.zmtcdn.com/data/pictures/1/18602861/bd2825ec26c21ebdc945edb7df3b0d99.jpg",
                      "title": "Taftoon Bar & Kitchen",
                      "ratings": "4.5",
                  },
                  {
                      "image": "https://b.zmtcdn.com/data/pictures/4/18357374/661d0edd484343c669da600a272e2256.jpg",
      
                      "ratings": "4.0",
                      "title": "Veranda"
                  },
                  {
                      "image": "https://b.zmtcdn.com/data/pictures/4/18902194/e92e2a3d4b5c6e25fd4211d06b9a909e.jpg",
      
                      "ratings": "4.0",
                      "title": "145 The Mill"
                  },
                  {
                      "image": "https://b.zmtcdn.com/data/pictures/3/17871363/c53db6ba261c3e2d4db1afc47ec3eeb0.jpg",
      
                      "ratings": "4.0",
                      "title": "The Fatty Bao"
                  },
              ]
          }
      
        dispatcher.utter_message(json_message=data)
PDF Attachment
    • sending response from domain.yml 
      responses:
        utter_pdf:
          - text: "Here is the PDF."
            custom: 
              payload: pdf_attachment
              title: "PDF Title"
              url: "URL to PDF file"
    • sending response from actions.py 
        data = {
          payload:"pdf_attachment",
          title: "PDF Title",
          url: "URL to PDF file"
        }

